name: Reusable Slang Tidy

on:
  workflow_call:
    inputs:
      producer_repo: { type: string, required: true }
      slang_tag:     { type: string, default: "master-latest" }
      artifact_name: { type: string, default: "slang-Linux-gcc-11-release.tar.gz" }

      config_repo:   { type: string, required: true }
      config_ref:    { type: string, default: "main" }
      config_path:   { type: string, default: "config/.slang-tidy" }

      base_branch:       { type: string, default: "master" }
      run_full_scan:     { type: string, default: "false" }
      fail_on_no_files:  { type: string, default: "false" }

      upload_report:     { type: string, default: "true" } 
      report_name:       { type: string, default: "slang-tidy-report.txt" }
      max_print_lines:   { type: string, default: "200" }
      fail_on_findings:  { type: string, default: "false" }
      comment_on_pr:     { type: string, default: "false" } 

jobs:
  tidy:
    runs-on: ubuntu-latest
    env:
      SLANG_INSTALL_DIR: ~/.slang-install

    steps:
      - name: Checkout target repo (student repo)
        uses: actions/checkout@v4

      - name: Checkout shared config
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.config_repo }}
          ref: ${{ inputs.config_ref }}
          path: _slang_config
          sparse-checkout: |
            ${{ inputs.config_path }}
          sparse-checkout-cone-mode: false

      - name: Set config path
        run: echo "SLANG_TIDY_CONFIG=$PWD/_slang_config/${{ inputs.config_path }}" >> $GITHUB_ENV

      - name: Restore Slang cache
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ env.SLANG_INSTALL_DIR }}
          key: slang-install-linux-${{ inputs.slang_tag }}

      - name: Download prebuilt Slang (Linux)
        if: steps.cache.outputs.cache-hit != 'true'
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ inputs.producer_repo }}
          tag: ${{ inputs.slang_tag }}
          fileName: ${{ inputs.artifact_name }}
          out-file-path: slang-tmp
          extract: true

      - name: Install Slang (cache miss)
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p "${SLANG_INSTALL_DIR}"
          cp -r slang-tmp/* "${SLANG_INSTALL_DIR}/"

      - name: Add to PATH & verify
        run: |
          echo "${SLANG_INSTALL_DIR}/bin" >> $GITHUB_PATH
          echo "SLANG_TIDY_BIN=${SLANG_INSTALL_DIR}/bin/slang-tidy" >> $GITHUB_ENV
          "${SLANG_INSTALL_DIR}/bin/slang-tidy" --version
          test -f "${SLANG_TIDY_CONFIG}" || (echo "Config not found at ${SLANG_TIDY_CONFIG}" && exit 1)

      - name: Determine SystemVerilog files
        id: files
        shell: bash
        run: |
          set -euo pipefail
          git fetch --no-tags --prune --unshallow || true

          if [[ "${{ inputs.run_full_scan }}" == "true" ]]; then
            FILES="$(git ls-files '*.sv' '*.svh' || true)"
          else
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              BASE="${{ github.event.pull_request.base.sha }}"
              HEAD="${{ github.sha }}"
            else
              BASE_BRANCH="${{ inputs.base_branch }}"
              git fetch origin "$BASE_BRANCH":refs/remotes/origin/"$BASE_BRANCH"
              BASE="origin/$BASE_BRANCH"
              HEAD="${{ github.sha }}"
            fi
            mapfile -t ARR < <(git diff --name-only --diff-filter=ACMRT "$BASE" "$HEAD" | grep -Ei '\.(sv|svh)$' || true)
            FILES="${ARR[*]}"
          fi

          echo "FILES=$FILES" >> $GITHUB_ENV
          if [[ -z "$FILES" ]]; then
            echo "none=true" >> $GITHUB_OUTPUT
          else
            echo "none=false" >> $GITHUB_OUTPUT
            echo "Will lint: $FILES"
          fi

      - name: Run slang-tidy & capture report
        if: steps.files.outputs.none == 'false'
        id: run_tidy
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p _slang_report
          REPORT="_slang_report/${{ inputs.report_name }}"
      
          TEMP_REPORT="_slang_report/temp-raw-output.txt"
          
          set +e
          "${SLANG_TIDY_BIN}" --config-file "${SLANG_TIDY_CONFIG}" $FILES | tee "$TEMP_REPORT"
          TIDY_STATUS=${PIPESTATUS[0]}
          set -e
          
          REPORT="_slang_report/${{ inputs.report_name }}"
          sed 's/\x1b\[[0-9;]*m//g' "$TEMP_REPORT" > "$REPORT"
          
          echo "report_path=$REPORT" >> $GITHUB_OUTPUT
          echo "tidy_status=$TIDY_STATUS" >> $GITHUB_OUTPUT
          
          SUMMARY_FILE="_slang_report/summary.txt"
          MARKER="=== 341 SLANG-TIDY SUMMARY ==="
          if grep -qF "$MARKER" "$TEMP_REPORT"; then
            awk -v m="$MARKER" 'found || index($0,m){found=1; print}' "$TEMP_REPORT" | sed 's/\x1b\[[0-9;]*m//g' > "$SUMMARY_FILE"
          else
            head -n ${{ inputs.max_print_lines }} "$TEMP_REPORT" | sed 's/\x1b\[[0-9;]*m//g' > "$SUMMARY_FILE" || true
          fi
      
          PREVIEW_FILE="_slang_report/summary_preview.txt"
          head -n ${{ inputs.max_print_lines }} "$SUMMARY_FILE" | sed 's/\x1b\[[0-9;]*m//g' > "$PREVIEW_FILE" || true
      
          DELIMITER="EOF_SLANG_TIDY_$(date +%s)"
          {
            echo "summary_preview<<$DELIMITER"
            cat "$PREVIEW_FILE"
            echo "$DELIMITER"
          } >> "$GITHUB_OUTPUT"
      
          TOTAL_LINES=$(wc -l < "$SUMMARY_FILE" || echo 0)
      
          SHOULD_FAIL="false"
          FAIL_REASON=""
          
          if [[ "${{ inputs.fail_on_findings }}" == "true" ]]; then
            if [ -s "$REPORT" ]; then
              SHOULD_FAIL="true"
              FAIL_REASON="slang-tidy reported findings; see artifact ${REPORT}"
              echo "::error::${FAIL_REASON}"
            fi
          fi
          
          if [ "$TIDY_STATUS" -ne 0 ]; then
            SHOULD_FAIL="true"
            FAIL_REASON="slang-tidy failed with exit status $TIDY_STATUS"
            echo "::error::${FAIL_REASON}"
          fi
          
          # Check for various failure indicators in the summary
          if grep -qE "(FAILED|Failed: [1-9])" "$SUMMARY_FILE"; then
            SHOULD_FAIL="true"
            FAIL_REASON="slang-tidy reported failures in summary"
            echo "::error::${FAIL_REASON}"
          fi
          
          # Check for diagnostics/warnings if fail_on_findings is enabled
          if [[ "${{ inputs.fail_on_findings }}" == "true" ]]; then
            if grep -qE "(Warnings: [1-9]|Diagnostics found)" "$SUMMARY_FILE"; then
              SHOULD_FAIL="true"
              FAIL_REASON="slang-tidy reported diagnostics/warnings; see artifact"
              echo "::error::${FAIL_REASON}"
            fi
          fi
          
          echo "should_fail=$SHOULD_FAIL" >> $GITHUB_OUTPUT
          echo "fail_reason=$FAIL_REASON" >> $GITHUB_OUTPUT

      - name: Create empty report when no files found
        if: inputs.upload_report == 'true' && steps.files.outputs.none == 'true'
        run: |
          mkdir -p _slang_report
          echo "No SystemVerilog files found to lint." > "_slang_report/${{ inputs.report_name }}"
          echo "No SystemVerilog files found to lint." > "_slang_report/summary.txt"

      - name: Add summary to Actions page when no files found
        if: steps.files.outputs.none == 'true'
        run: |
          echo "### slang-tidy summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "No SystemVerilog files found to lint." >> "$GITHUB_STEP_SUMMARY"

      - name: Add summary to Actions page for all runs
        if: steps.files.outputs.none == 'false'
        run: |
          echo "### slang-tidy summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo '```text' >> "$GITHUB_STEP_SUMMARY"
          cat "_slang_report/summary_preview.txt" >> "$GITHUB_STEP_SUMMARY" || true
          echo '```' >> "$GITHUB_STEP_SUMMARY"
          
          SUMMARY_LINES=$(wc -l < "_slang_report/summary.txt" || echo 0)
          if [ "$SUMMARY_LINES" -gt ${{ inputs.max_print_lines }} ]; then
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "_(truncated; download the artifact for full details)_" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Upload report artifact
        if: inputs.upload_report == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: slang-tidy-report
          path: |
            _slang_report/${{ inputs.report_name }}
            _slang_report/summary.txt
          if-no-files-found: error

      - name: Fail workflow if slang-tidy failed
        if: steps.files.outputs.none == 'false' && steps.run_tidy.outputs.should_fail == 'true'
        run: |
          echo "Workflow failing due to: ${{ steps.run_tidy.outputs.fail_reason }}"
          exit 1

      - name: No SystemVerilog files to lint
        if: steps.files.outputs.none == 'true' && inputs.fail_on_no_files != 'true'
        run: echo "No .sv/.svh files found (or changed); skipping."

      - name: Fail due to no files (policy)
        if: steps.files.outputs.none == 'true' && inputs.fail_on_no_files == 'true'
        run: |
          echo "No .sv/.svh files found (or changed) and fail_on_no_files=true" >&2
          exit 1
